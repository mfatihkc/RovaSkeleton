/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.6.2.0 (NJsonSchema v10.1.23.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

export interface IAdminClient {
    update(command: UpdateUserCommand): Observable<FileResponse>;
}

@Injectable({
    providedIn: 'root'
})
export class AdminClient implements IAdminClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    update(command: UpdateUserCommand): Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/Admin";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse>><any>_observableThrow(response_);
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(<any>null);
    }
}

export interface IContactsClient {
    get(): Observable<ContactDto[]>;
    create(command: CreateContactCommand): Observable<string>;
    update(command: UpdateContactCommand): Observable<FileResponse>;
    delete(id: string | null): Observable<FileResponse>;
    star(command: UpdateContactStarCommand): Observable<FileResponse>;
}

@Injectable({
    providedIn: 'root'
})
export class ContactsClient implements IContactsClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    get(): Observable<ContactDto[]> {
        let url_ = this.baseUrl + "/api/Contacts";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(<any>response_);
                } catch (e) {
                    return <Observable<ContactDto[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<ContactDto[]>><any>_observableThrow(response_);
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<ContactDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ContactDto.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ContactDto[]>(<any>null);
    }

    create(command: CreateContactCommand): Observable<string> {
        let url_ = this.baseUrl + "/api/Contacts";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(<any>response_);
                } catch (e) {
                    return <Observable<string>><any>_observableThrow(e);
                }
            } else
                return <Observable<string>><any>_observableThrow(response_);
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<string>(<any>null);
    }

    update(command: UpdateContactCommand): Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/Contacts";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse>><any>_observableThrow(response_);
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(<any>null);
    }

    delete(id: string | null): Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/Contacts/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse>><any>_observableThrow(response_);
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(<any>null);
    }

    star(command: UpdateContactStarCommand): Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/Contacts/Star";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processStar(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processStar(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse>><any>_observableThrow(response_);
        }));
    }

    protected processStar(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(<any>null);
    }
}

export interface ISchedulesClient {
    loadData(param: Params): Observable<ScheduleDto[]>;
    updateData(param: EditParams): Observable<ScheduleDto[]>;
}

@Injectable({
    providedIn: 'root'
})
export class SchedulesClient implements ISchedulesClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    loadData(param: Params): Observable<ScheduleDto[]> {
        let url_ = this.baseUrl + "/api/Schedules/LoadData";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(param);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processLoadData(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processLoadData(<any>response_);
                } catch (e) {
                    return <Observable<ScheduleDto[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<ScheduleDto[]>><any>_observableThrow(response_);
        }));
    }

    protected processLoadData(response: HttpResponseBase): Observable<ScheduleDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ScheduleDto.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ScheduleDto[]>(<any>null);
    }

    updateData(param: EditParams): Observable<ScheduleDto[]> {
        let url_ = this.baseUrl + "/api/Schedules/UpdateData";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(param);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateData(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateData(<any>response_);
                } catch (e) {
                    return <Observable<ScheduleDto[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<ScheduleDto[]>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateData(response: HttpResponseBase): Observable<ScheduleDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ScheduleDto.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ScheduleDto[]>(<any>null);
    }
}

export interface IUsersClient {
    create(command: CreateUserCommand): Observable<string>;
    update(command: UpdateUserCommand): Observable<FileResponse>;
}

@Injectable({
    providedIn: 'root'
})
export class UsersClient implements IUsersClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    create(command: CreateUserCommand): Observable<string> {
        let url_ = this.baseUrl + "/api/Users";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(<any>response_);
                } catch (e) {
                    return <Observable<string>><any>_observableThrow(e);
                }
            } else
                return <Observable<string>><any>_observableThrow(response_);
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<string>(<any>null);
    }

    update(command: UpdateUserCommand): Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/Users";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse>><any>_observableThrow(response_);
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(<any>null);
    }
}

export class UpdateUserCommand implements IUpdateUserCommand {
    userId?: string | undefined;
    email?: string | undefined;
    fullName?: string | undefined;
    lastName?: string | undefined;
    role?: string | undefined;

    constructor(data?: IUpdateUserCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userId = _data["userId"];
            this.email = _data["email"];
            this.fullName = _data["fullName"];
            this.lastName = _data["lastName"];
            this.role = _data["role"];
        }
    }

    static fromJS(data: any): UpdateUserCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateUserCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["email"] = this.email;
        data["fullName"] = this.fullName;
        data["lastName"] = this.lastName;
        data["role"] = this.role;
        return data; 
    }
}

export interface IUpdateUserCommand {
    userId?: string | undefined;
    email?: string | undefined;
    fullName?: string | undefined;
    lastName?: string | undefined;
    role?: string | undefined;
}

export class ContactDto implements IContactDto {
    id?: string | undefined;
    userId?: string | undefined;
    fullName?: string | undefined;
    lastName?: string | undefined;
    avatar?: string | undefined;
    nickName?: string | undefined;
    company?: string | undefined;
    jobTitle?: string | undefined;
    email?: string | undefined;
    phone?: string | undefined;
    address?: string | undefined;
    birthday?: Date | undefined;
    notes?: string | undefined;
    star?: boolean;
    created?: Date | undefined;

    constructor(data?: IContactDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.userId = _data["userId"];
            this.fullName = _data["fullName"];
            this.lastName = _data["lastName"];
            this.avatar = _data["avatar"];
            this.nickName = _data["nickName"];
            this.company = _data["company"];
            this.jobTitle = _data["jobTitle"];
            this.email = _data["email"];
            this.phone = _data["phone"];
            this.address = _data["address"];
            this.birthday = _data["birthday"] ? new Date(_data["birthday"].toString()) : <any>undefined;
            this.notes = _data["notes"];
            this.star = _data["star"];
            this.created = _data["created"] ? new Date(_data["created"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): ContactDto {
        data = typeof data === 'object' ? data : {};
        let result = new ContactDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["userId"] = this.userId;
        data["fullName"] = this.fullName;
        data["lastName"] = this.lastName;
        data["avatar"] = this.avatar;
        data["nickName"] = this.nickName;
        data["company"] = this.company;
        data["jobTitle"] = this.jobTitle;
        data["email"] = this.email;
        data["phone"] = this.phone;
        data["address"] = this.address;
        data["birthday"] = this.birthday ? this.birthday.toISOString() : <any>undefined;
        data["notes"] = this.notes;
        data["star"] = this.star;
        data["created"] = this.created ? this.created.toISOString() : <any>undefined;
        return data; 
    }
}

export interface IContactDto {
    id?: string | undefined;
    userId?: string | undefined;
    fullName?: string | undefined;
    lastName?: string | undefined;
    avatar?: string | undefined;
    nickName?: string | undefined;
    company?: string | undefined;
    jobTitle?: string | undefined;
    email?: string | undefined;
    phone?: string | undefined;
    address?: string | undefined;
    birthday?: Date | undefined;
    notes?: string | undefined;
    star?: boolean;
    created?: Date | undefined;
}

export class CreateContactCommand implements ICreateContactCommand {
    id?: string | undefined;
    fullName?: string | undefined;
    lastName?: string | undefined;
    avatar?: string | undefined;
    nickName?: string | undefined;
    company?: string | undefined;
    jobTitle?: string | undefined;
    email?: string | undefined;
    phone?: string | undefined;
    address?: string | undefined;
    birthday?: string | undefined;
    notes?: string | undefined;

    constructor(data?: ICreateContactCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.fullName = _data["fullName"];
            this.lastName = _data["lastName"];
            this.avatar = _data["avatar"];
            this.nickName = _data["nickName"];
            this.company = _data["company"];
            this.jobTitle = _data["jobTitle"];
            this.email = _data["email"];
            this.phone = _data["phone"];
            this.address = _data["address"];
            this.birthday = _data["birthday"];
            this.notes = _data["notes"];
        }
    }

    static fromJS(data: any): CreateContactCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateContactCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["fullName"] = this.fullName;
        data["lastName"] = this.lastName;
        data["avatar"] = this.avatar;
        data["nickName"] = this.nickName;
        data["company"] = this.company;
        data["jobTitle"] = this.jobTitle;
        data["email"] = this.email;
        data["phone"] = this.phone;
        data["address"] = this.address;
        data["birthday"] = this.birthday;
        data["notes"] = this.notes;
        return data; 
    }
}

export interface ICreateContactCommand {
    id?: string | undefined;
    fullName?: string | undefined;
    lastName?: string | undefined;
    avatar?: string | undefined;
    nickName?: string | undefined;
    company?: string | undefined;
    jobTitle?: string | undefined;
    email?: string | undefined;
    phone?: string | undefined;
    address?: string | undefined;
    birthday?: string | undefined;
    notes?: string | undefined;
}

export class UpdateContactCommand implements IUpdateContactCommand {
    id?: string | undefined;
    fullName?: string | undefined;
    lastName?: string | undefined;
    avatar?: string | undefined;
    nickName?: string | undefined;
    company?: string | undefined;
    jobTitle?: string | undefined;
    email?: string | undefined;
    phone?: string | undefined;
    address?: string | undefined;
    birthday?: string | undefined;
    notes?: string | undefined;

    constructor(data?: IUpdateContactCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.fullName = _data["fullName"];
            this.lastName = _data["lastName"];
            this.avatar = _data["avatar"];
            this.nickName = _data["nickName"];
            this.company = _data["company"];
            this.jobTitle = _data["jobTitle"];
            this.email = _data["email"];
            this.phone = _data["phone"];
            this.address = _data["address"];
            this.birthday = _data["birthday"];
            this.notes = _data["notes"];
        }
    }

    static fromJS(data: any): UpdateContactCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateContactCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["fullName"] = this.fullName;
        data["lastName"] = this.lastName;
        data["avatar"] = this.avatar;
        data["nickName"] = this.nickName;
        data["company"] = this.company;
        data["jobTitle"] = this.jobTitle;
        data["email"] = this.email;
        data["phone"] = this.phone;
        data["address"] = this.address;
        data["birthday"] = this.birthday;
        data["notes"] = this.notes;
        return data; 
    }
}

export interface IUpdateContactCommand {
    id?: string | undefined;
    fullName?: string | undefined;
    lastName?: string | undefined;
    avatar?: string | undefined;
    nickName?: string | undefined;
    company?: string | undefined;
    jobTitle?: string | undefined;
    email?: string | undefined;
    phone?: string | undefined;
    address?: string | undefined;
    birthday?: string | undefined;
    notes?: string | undefined;
}

export class UpdateContactStarCommand implements IUpdateContactStarCommand {
    id?: string | undefined;

    constructor(data?: IUpdateContactStarCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): UpdateContactStarCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateContactStarCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data; 
    }
}

export interface IUpdateContactStarCommand {
    id?: string | undefined;
}

export class ScheduleDto implements IScheduleDto {
    id?: number;
    userId?: string | undefined;
    startTime?: Date | undefined;
    endTime?: Date | undefined;
    subject?: string | undefined;
    location?: string | undefined;
    description?: string | undefined;
    isAllDay?: boolean | undefined;
    startTimezone?: string | undefined;
    endTimezone?: string | undefined;
    recurrenceRule?: string | undefined;
    recurrenceId?: number;
    recurrenceException?: string | undefined;
    eventType?: string | undefined;

    constructor(data?: IScheduleDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.userId = _data["userId"];
            this.startTime = _data["startTime"] ? new Date(_data["startTime"].toString()) : <any>undefined;
            this.endTime = _data["endTime"] ? new Date(_data["endTime"].toString()) : <any>undefined;
            this.subject = _data["subject"];
            this.location = _data["location"];
            this.description = _data["description"];
            this.isAllDay = _data["isAllDay"];
            this.startTimezone = _data["startTimezone"];
            this.endTimezone = _data["endTimezone"];
            this.recurrenceRule = _data["recurrenceRule"];
            this.recurrenceId = _data["recurrenceId"];
            this.recurrenceException = _data["recurrenceException"];
            this.eventType = _data["eventType"];
        }
    }

    static fromJS(data: any): ScheduleDto {
        data = typeof data === 'object' ? data : {};
        let result = new ScheduleDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["userId"] = this.userId;
        data["startTime"] = this.startTime ? this.startTime.toISOString() : <any>undefined;
        data["endTime"] = this.endTime ? this.endTime.toISOString() : <any>undefined;
        data["subject"] = this.subject;
        data["location"] = this.location;
        data["description"] = this.description;
        data["isAllDay"] = this.isAllDay;
        data["startTimezone"] = this.startTimezone;
        data["endTimezone"] = this.endTimezone;
        data["recurrenceRule"] = this.recurrenceRule;
        data["recurrenceId"] = this.recurrenceId;
        data["recurrenceException"] = this.recurrenceException;
        data["eventType"] = this.eventType;
        return data; 
    }
}

export interface IScheduleDto {
    id?: number;
    userId?: string | undefined;
    startTime?: Date | undefined;
    endTime?: Date | undefined;
    subject?: string | undefined;
    location?: string | undefined;
    description?: string | undefined;
    isAllDay?: boolean | undefined;
    startTimezone?: string | undefined;
    endTimezone?: string | undefined;
    recurrenceRule?: string | undefined;
    recurrenceId?: number;
    recurrenceException?: string | undefined;
    eventType?: string | undefined;
}

export class Params implements IParams {
    startDate?: Date;
    endDate?: Date;

    constructor(data?: IParams) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.startDate = _data["startDate"] ? new Date(_data["startDate"].toString()) : <any>undefined;
            this.endDate = _data["endDate"] ? new Date(_data["endDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): Params {
        data = typeof data === 'object' ? data : {};
        let result = new Params();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["startDate"] = this.startDate ? this.startDate.toISOString() : <any>undefined;
        data["endDate"] = this.endDate ? this.endDate.toISOString() : <any>undefined;
        return data; 
    }
}

export interface IParams {
    startDate?: Date;
    endDate?: Date;
}

export class EditParams implements IEditParams {
    key?: string | undefined;
    action?: string | undefined;
    added?: ScheduleEvent[] | undefined;
    changed?: ScheduleEvent[] | undefined;
    deleted?: ScheduleEvent[] | undefined;
    value?: ScheduleEvent | undefined;

    constructor(data?: IEditParams) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.key = _data["key"];
            this.action = _data["action"];
            if (Array.isArray(_data["added"])) {
                this.added = [] as any;
                for (let item of _data["added"])
                    this.added!.push(ScheduleEvent.fromJS(item));
            }
            if (Array.isArray(_data["changed"])) {
                this.changed = [] as any;
                for (let item of _data["changed"])
                    this.changed!.push(ScheduleEvent.fromJS(item));
            }
            if (Array.isArray(_data["deleted"])) {
                this.deleted = [] as any;
                for (let item of _data["deleted"])
                    this.deleted!.push(ScheduleEvent.fromJS(item));
            }
            this.value = _data["value"] ? ScheduleEvent.fromJS(_data["value"]) : <any>undefined;
        }
    }

    static fromJS(data: any): EditParams {
        data = typeof data === 'object' ? data : {};
        let result = new EditParams();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["key"] = this.key;
        data["action"] = this.action;
        if (Array.isArray(this.added)) {
            data["added"] = [];
            for (let item of this.added)
                data["added"].push(item.toJSON());
        }
        if (Array.isArray(this.changed)) {
            data["changed"] = [];
            for (let item of this.changed)
                data["changed"].push(item.toJSON());
        }
        if (Array.isArray(this.deleted)) {
            data["deleted"] = [];
            for (let item of this.deleted)
                data["deleted"].push(item.toJSON());
        }
        data["value"] = this.value ? this.value.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IEditParams {
    key?: string | undefined;
    action?: string | undefined;
    added?: ScheduleEvent[] | undefined;
    changed?: ScheduleEvent[] | undefined;
    deleted?: ScheduleEvent[] | undefined;
    value?: ScheduleEvent | undefined;
}

export class ScheduleEvent implements IScheduleEvent {
    id?: number;
    subject?: string | undefined;
    startTime?: Date;
    endTime?: Date;
    startTimezone?: string | undefined;
    endTimezone?: string | undefined;
    location?: string | undefined;
    description?: string | undefined;
    isAllDay?: boolean;
    recurrenceId?: number;
    recurrenceRule?: string | undefined;
    recurrenceException?: string | undefined;
    eventType?: string | undefined;

    constructor(data?: IScheduleEvent) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.subject = _data["subject"];
            this.startTime = _data["startTime"] ? new Date(_data["startTime"].toString()) : <any>undefined;
            this.endTime = _data["endTime"] ? new Date(_data["endTime"].toString()) : <any>undefined;
            this.startTimezone = _data["startTimezone"];
            this.endTimezone = _data["endTimezone"];
            this.location = _data["location"];
            this.description = _data["description"];
            this.isAllDay = _data["isAllDay"];
            this.recurrenceId = _data["recurrenceId"];
            this.recurrenceRule = _data["recurrenceRule"];
            this.recurrenceException = _data["recurrenceException"];
            this.eventType = _data["eventType"];
        }
    }

    static fromJS(data: any): ScheduleEvent {
        data = typeof data === 'object' ? data : {};
        let result = new ScheduleEvent();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["subject"] = this.subject;
        data["startTime"] = this.startTime ? this.startTime.toISOString() : <any>undefined;
        data["endTime"] = this.endTime ? this.endTime.toISOString() : <any>undefined;
        data["startTimezone"] = this.startTimezone;
        data["endTimezone"] = this.endTimezone;
        data["location"] = this.location;
        data["description"] = this.description;
        data["isAllDay"] = this.isAllDay;
        data["recurrenceId"] = this.recurrenceId;
        data["recurrenceRule"] = this.recurrenceRule;
        data["recurrenceException"] = this.recurrenceException;
        data["eventType"] = this.eventType;
        return data; 
    }
}

export interface IScheduleEvent {
    id?: number;
    subject?: string | undefined;
    startTime?: Date;
    endTime?: Date;
    startTimezone?: string | undefined;
    endTimezone?: string | undefined;
    location?: string | undefined;
    description?: string | undefined;
    isAllDay?: boolean;
    recurrenceId?: number;
    recurrenceRule?: string | undefined;
    recurrenceException?: string | undefined;
    eventType?: string | undefined;
}

export class CreateUserCommand implements ICreateUserCommand {
    userId?: string | undefined;
    email?: string | undefined;
    fullName?: string | undefined;
    lastName?: string | undefined;

    constructor(data?: ICreateUserCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userId = _data["userId"];
            this.email = _data["email"];
            this.fullName = _data["fullName"];
            this.lastName = _data["lastName"];
        }
    }

    static fromJS(data: any): CreateUserCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateUserCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["email"] = this.email;
        data["fullName"] = this.fullName;
        data["lastName"] = this.lastName;
        return data; 
    }
}

export interface ICreateUserCommand {
    userId?: string | undefined;
    email?: string | undefined;
    fullName?: string | undefined;
    lastName?: string | undefined;
}

export interface FileResponse {
    data: Blob;
    status: number;
    fileName?: string;
    headers?: { [name: string]: any };
}

export class SwaggerException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new SwaggerException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}